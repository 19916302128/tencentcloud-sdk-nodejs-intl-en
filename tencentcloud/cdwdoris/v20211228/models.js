/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const AbstractModel = require("../../common/abstract_model");

/**
 * ModifyInstance response structure.
 * @class
 */
class ModifyInstanceResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DestroyInstance response structure.
 * @class
 */
class DestroyInstanceResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Process ID
         * @type {string || null}
         */
        this.FlowId = null;

        /**
         * Cluster ID
         * @type {string || null}
         */
        this.InstanceId = null;

        /**
         * Error message
         * @type {string || null}
         */
        this.ErrorMsg = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.FlowId = 'FlowId' in params ? params.FlowId : null;
        this.InstanceId = 'InstanceId' in params ? params.InstanceId : null;
        this.ErrorMsg = 'ErrorMsg' in params ? params.ErrorMsg : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeSlowQueryRecordsDownload request structure.
 * @class
 */
class DescribeSlowQueryRecordsDownloadRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Instance ID
         * @type {string || null}
         */
        this.InstanceId = null;

        /**
         * Slow log time
         * @type {number || null}
         */
        this.QueryDurationMs = null;

        /**
         * Start time
         * @type {string || null}
         */
        this.StartTime = null;

        /**
         * End time
         * @type {string || null}
         */
        this.EndTime = null;

        /**
         * Sort parameters
         * @type {string || null}
         */
        this.DurationMs = null;

        /**
         * Query SQL
         * @type {string || null}
         */
        this.Sql = null;

        /**
         * Sort parameters
         * @type {string || null}
         */
        this.ReadRows = null;

        /**
         * Sort parameters
         * @type {string || null}
         */
        this.ResultBytes = null;

        /**
         * Sort parameters
         * @type {string || null}
         */
        this.MemoryUsage = null;

        /**
         * IsQuery condition
         * @type {number || null}
         */
        this.IsQuery = null;

        /**
         * Database name
         * @type {Array.<string> || null}
         */
        this.DbName = null;

        /**
         * catalog name
         * @type {Array.<string> || null}
         */
        this.CatalogName = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.InstanceId = 'InstanceId' in params ? params.InstanceId : null;
        this.QueryDurationMs = 'QueryDurationMs' in params ? params.QueryDurationMs : null;
        this.StartTime = 'StartTime' in params ? params.StartTime : null;
        this.EndTime = 'EndTime' in params ? params.EndTime : null;
        this.DurationMs = 'DurationMs' in params ? params.DurationMs : null;
        this.Sql = 'Sql' in params ? params.Sql : null;
        this.ReadRows = 'ReadRows' in params ? params.ReadRows : null;
        this.ResultBytes = 'ResultBytes' in params ? params.ResultBytes : null;
        this.MemoryUsage = 'MemoryUsage' in params ? params.MemoryUsage : null;
        this.IsQuery = 'IsQuery' in params ? params.IsQuery : null;
        this.DbName = 'DbName' in params ? params.DbName : null;
        this.CatalogName = 'CatalogName' in params ? params.CatalogName : null;

    }
}

/**
 * ResizeDisk request structure.
 * @class
 */
class ResizeDiskRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Cluster ID
         * @type {string || null}
         */
        this.InstanceId = null;

        /**
         * Role (MATER/CORE), MASTER corresponds to FE, CORE corresponds to BE.
         * @type {string || null}
         */
        this.Type = null;

        /**
         * Cloud disk size
         * @type {number || null}
         */
        this.DiskSize = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.InstanceId = 'InstanceId' in params ? params.InstanceId : null;
        this.Type = 'Type' in params ? params.Type : null;
        this.DiskSize = 'DiskSize' in params ? params.DiskSize : null;

    }
}

/**
 * NodeInfo
 * @class
 */
class NodeInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * User IP
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.Ip = null;

        /**
         * Node status
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.Status = null;

        /**
         * Node role name
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.NodeName = null;

        /**
         * Component name
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.ComponentName = null;

        /**
         * Node role
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.NodeRole = null;

        /**
         * The time when the node was last restarted
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.LastRestartTime = null;

        /**
         * The availability zone where the node is located
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.Zone = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Ip = 'Ip' in params ? params.Ip : null;
        this.Status = 'Status' in params ? params.Status : null;
        this.NodeName = 'NodeName' in params ? params.NodeName : null;
        this.ComponentName = 'ComponentName' in params ? params.ComponentName : null;
        this.NodeRole = 'NodeRole' in params ? params.NodeRole : null;
        this.LastRestartTime = 'LastRestartTime' in params ? params.LastRestartTime : null;
        this.Zone = 'Zone' in params ? params.Zone : null;

    }
}

/**
 * RestartClusterForNode response structure.
 * @class
 */
class RestartClusterForNodeResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Process related information
         * @type {number || null}
         */
        this.FlowId = null;

        /**
         * Error message
         * @type {string || null}
         */
        this.ErrorMsg = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.FlowId = 'FlowId' in params ? params.FlowId : null;
        this.ErrorMsg = 'ErrorMsg' in params ? params.ErrorMsg : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeInstanceNodes response structure.
 * @class
 */
class DescribeInstanceNodesResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Total number
         * @type {number || null}
         */
        this.TotalCount = null;

        /**
         * Total number of instance nodes
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {Array.<InstanceNode> || null}
         */
        this.InstanceNodesList = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;

        if (params.InstanceNodesList) {
            this.InstanceNodesList = new Array();
            for (let z in params.InstanceNodesList) {
                let obj = new InstanceNode();
                obj.deserialize(params.InstanceNodesList[z]);
                this.InstanceNodesList.push(obj);
            }
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeInstanceState request structure.
 * @class
 */
class DescribeInstanceStateRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Cluster instance name
         * @type {string || null}
         */
        this.InstanceId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.InstanceId = 'InstanceId' in params ? params.InstanceId : null;

    }
}

/**
 * DescribeClusterConfigs response structure.
 * @class
 */
class DescribeClusterConfigsResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Return information about the instance's configuration file.
         * @type {Array.<ClusterConfigsInfoFromEMR> || null}
         */
        this.ClusterConfList = null;

        /**
         * Return the current kernel version. If it does not exist, a null character string is returned.
         * @type {string || null}
         */
        this.BuildVersion = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.ClusterConfList) {
            this.ClusterConfList = new Array();
            for (let z in params.ClusterConfList) {
                let obj = new ClusterConfigsInfoFromEMR();
                obj.deserialize(params.ClusterConfList[z]);
                this.ClusterConfList.push(obj);
            }
        }
        this.BuildVersion = 'BuildVersion' in params ? params.BuildVersion : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * ScaleOutInstance response structure.
 * @class
 */
class ScaleOutInstanceResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Process ID
         * @type {string || null}
         */
        this.FlowId = null;

        /**
         * Cluster ID
         * @type {string || null}
         */
        this.InstanceId = null;

        /**
         * Error message
         * @type {string || null}
         */
        this.ErrorMsg = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.FlowId = 'FlowId' in params ? params.FlowId : null;
        this.InstanceId = 'InstanceId' in params ? params.InstanceId : null;
        this.ErrorMsg = 'ErrorMsg' in params ? params.ErrorMsg : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Slow log records
 * @class
 */
class SlowQueryRecord extends  AbstractModel {
    constructor(){
        super();

        /**
         * User query 
         * @type {string || null}
         */
        this.OsUser = null;

        /**
         * ID query
         * @type {string || null}
         */
        this.InitialQueryId = null;

        /**
         * SQL statement
         * @type {string || null}
         */
        this.Sql = null;

        /**
         * Start time
         * @type {string || null}
         */
        this.QueryStartTime = null;

        /**
         * Execution duration
         * @type {number || null}
         */
        this.DurationMs = null;

        /**
         * The number of read rows
         * @type {number || null}
         */
        this.ReadRows = null;

        /**
         * Total number of read bytes
         * @type {number || null}
         */
        this.ResultRows = null;

        /**
         * Result bytes
         * @type {number || null}
         */
        this.ResultBytes = null;

        /**
         * Memory
         * @type {number || null}
         */
        this.MemoryUsage = null;

        /**
         * Initial query IP
         * @type {string || null}
         */
        this.InitialAddress = null;

        /**
         * Database name
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.DbName = null;

        /**
         * Whether it is a query. 0 indicates no, and 1 indicates query statement.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.IsQuery = null;

        /**
         * MB format of ResultBytes
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.ResultBytesMB = null;

        /**
         * MemoryUsage, in MB
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.MemoryUsageMB = null;

        /**
         * DurationMs, in seconds
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.DurationSec = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.OsUser = 'OsUser' in params ? params.OsUser : null;
        this.InitialQueryId = 'InitialQueryId' in params ? params.InitialQueryId : null;
        this.Sql = 'Sql' in params ? params.Sql : null;
        this.QueryStartTime = 'QueryStartTime' in params ? params.QueryStartTime : null;
        this.DurationMs = 'DurationMs' in params ? params.DurationMs : null;
        this.ReadRows = 'ReadRows' in params ? params.ReadRows : null;
        this.ResultRows = 'ResultRows' in params ? params.ResultRows : null;
        this.ResultBytes = 'ResultBytes' in params ? params.ResultBytes : null;
        this.MemoryUsage = 'MemoryUsage' in params ? params.MemoryUsage : null;
        this.InitialAddress = 'InitialAddress' in params ? params.InitialAddress : null;
        this.DbName = 'DbName' in params ? params.DbName : null;
        this.IsQuery = 'IsQuery' in params ? params.IsQuery : null;
        this.ResultBytesMB = 'ResultBytesMB' in params ? params.ResultBytesMB : null;
        this.MemoryUsageMB = 'MemoryUsageMB' in params ? params.MemoryUsageMB : null;
        this.DurationSec = 'DurationSec' in params ? params.DurationSec : null;

    }
}

/**
 * DescribeInstanceNodes request structure.
 * @class
 */
class DescribeInstanceNodesRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Cluster instance ID
         * @type {string || null}
         */
        this.InstanceId = null;

        /**
         * Cluster role type, defaulted as "data node".
         * @type {string || null}
         */
        this.NodeRole = null;

        /**
         * Pagination parameters. The first page is 0, and the second page is 10.
         * @type {number || null}
         */
        this.Offset = null;

        /**
         * Pagination parameters. The pagination step length is 10 by default.
         * @type {number || null}
         */
        this.Limit = null;

        /**
         * Display policy, and all items are displayed when All is selected.
         * @type {string || null}
         */
        this.DisplayPolicy = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.InstanceId = 'InstanceId' in params ? params.InstanceId : null;
        this.NodeRole = 'NodeRole' in params ? params.NodeRole : null;
        this.Offset = 'Offset' in params ? params.Offset : null;
        this.Limit = 'Limit' in params ? params.Limit : null;
        this.DisplayPolicy = 'DisplayPolicy' in params ? params.DisplayPolicy : null;

    }
}

/**
 * ModifyInstance request structure.
 * @class
 */
class ModifyInstanceRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Instance ID
         * @type {string || null}
         */
        this.InstanceId = null;

        /**
         * Newly modified instance name
         * @type {string || null}
         */
        this.InstanceName = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.InstanceId = 'InstanceId' in params ? params.InstanceId : null;
        this.InstanceName = 'InstanceName' in params ? params.InstanceName : null;

    }
}

/**
 * Cluster billing-related information
 * @class
 */
class ChargeProperties extends  AbstractModel {
    constructor(){
        super();

        /**
         * Billing type: PREPAID for prepayment, and POSTPAID_BY_HOUR for postpayment.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.ChargeType = null;

        /**
         * Whether to automatically renew. 1 means automatic renewal is enabled.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.RenewFlag = null;

        /**
         * Billing duration
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.TimeSpan = null;

        /**
         * Billing time unit, and "m" means month, etc.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.TimeUnit = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.ChargeType = 'ChargeType' in params ? params.ChargeType : null;
        this.RenewFlag = 'RenewFlag' in params ? params.RenewFlag : null;
        this.TimeSpan = 'TimeSpan' in params ? params.TimeSpan : null;
        this.TimeUnit = 'TimeUnit' in params ? params.TimeUnit : null;

    }
}

/**
 * It is used to return configuration files and content in XML format, as well as other information related to the configuration files.
 * @class
 */
class ClusterConfigsInfoFromEMR extends  AbstractModel {
    constructor(){
        super();

        /**
         * Configuration file's name
         * @type {string || null}
         */
        this.FileName = null;

        /**
         * Related attribute information corresponding to the configuration files
         * @type {string || null}
         */
        this.FileConf = null;

        /**
         * Other attribute information corresponding to the configuration files
         * @type {string || null}
         */
        this.KeyConf = null;

        /**
         * Contents of the configuration files, base64 encoded
         * @type {string || null}
         */
        this.OriParam = null;

        /**
         * This is used to indicate whether the current configuration file has been modified without a restart, and reminds the user that a restart is needed.
         * @type {number || null}
         */
        this.NeedRestart = null;

        /**
         * Configuration file path
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.FilePath = null;

        /**
         * kv value of a configuration file
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.FileKeyValues = null;

        /**
         * kv value of a configuration file
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {Array.<ConfigKeyValue> || null}
         */
        this.FileKeyValuesNew = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.FileName = 'FileName' in params ? params.FileName : null;
        this.FileConf = 'FileConf' in params ? params.FileConf : null;
        this.KeyConf = 'KeyConf' in params ? params.KeyConf : null;
        this.OriParam = 'OriParam' in params ? params.OriParam : null;
        this.NeedRestart = 'NeedRestart' in params ? params.NeedRestart : null;
        this.FilePath = 'FilePath' in params ? params.FilePath : null;
        this.FileKeyValues = 'FileKeyValues' in params ? params.FileKeyValues : null;

        if (params.FileKeyValuesNew) {
            this.FileKeyValuesNew = new Array();
            for (let z in params.FileKeyValuesNew) {
                let obj = new ConfigKeyValue();
                obj.deserialize(params.FileKeyValuesNew[z]);
                this.FileKeyValuesNew.push(obj);
            }
        }

    }
}

/**
 * Instance node description information
 * @class
 */
class InstanceNode extends  AbstractModel {
    constructor(){
        super();

        /**
         * IP address
         * @type {string || null}
         */
        this.Ip = null;

        /**
         * Model, such as S1
         * @type {string || null}
         */
        this.Spec = null;

        /**
         * Number of CPU cores
         * @type {number || null}
         */
        this.Core = null;

        /**
         * Memory size
         * @type {number || null}
         */
        this.Memory = null;

        /**
         * Disk type
         * @type {string || null}
         */
        this.DiskType = null;

        /**
         * Disk size
         * @type {number || null}
         */
        this.DiskSize = null;

        /**
         * The name of the clickhouse cluster to which it belongs.
         * @type {string || null}
         */
        this.Role = null;

        /**
         * Status
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.Status = null;

        /**
         * rip
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.Rip = null;

        /**
         * FE node role
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.FeRole = null;

        /**
         * UUID
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.UUID = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Ip = 'Ip' in params ? params.Ip : null;
        this.Spec = 'Spec' in params ? params.Spec : null;
        this.Core = 'Core' in params ? params.Core : null;
        this.Memory = 'Memory' in params ? params.Memory : null;
        this.DiskType = 'DiskType' in params ? params.DiskType : null;
        this.DiskSize = 'DiskSize' in params ? params.DiskSize : null;
        this.Role = 'Role' in params ? params.Role : null;
        this.Status = 'Status' in params ? params.Status : null;
        this.Rip = 'Rip' in params ? params.Rip : null;
        this.FeRole = 'FeRole' in params ? params.FeRole : null;
        this.UUID = 'UUID' in params ? params.UUID : null;

    }
}

/**
 * CreateInstanceNew response structure.
 * @class
 */
class CreateInstanceNewResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Process ID
         * @type {string || null}
         */
        this.FlowId = null;

        /**
         * Instance ID
         * @type {string || null}
         */
        this.InstanceId = null;

        /**
         * Error message
         * @type {string || null}
         */
        this.ErrorMsg = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.FlowId = 'FlowId' in params ? params.FlowId : null;
        this.InstanceId = 'InstanceId' in params ? params.InstanceId : null;
        this.ErrorMsg = 'ErrorMsg' in params ? params.ErrorMsg : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeSlowQueryRecordsDownload response structure.
 * @class
 */
class DescribeSlowQueryRecordsDownloadResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * cos address
         * @type {string || null}
         */
        this.CosUrl = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.CosUrl = 'CosUrl' in params ? params.CosUrl : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DestroyInstance request structure.
 * @class
 */
class DestroyInstanceRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Cluster ID
         * @type {string || null}
         */
        this.InstanceId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.InstanceId = 'InstanceId' in params ? params.InstanceId : null;

    }
}

/**
 * CreateInstanceNew request structure.
 * @class
 */
class CreateInstanceNewRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Availability zone
         * @type {string || null}
         */
        this.Zone = null;

        /**
         * FE specifications
         * @type {CreateInstanceSpec || null}
         */
        this.FeSpec = null;

        /**
         * BE specifications.
         * @type {CreateInstanceSpec || null}
         */
        this.BeSpec = null;

        /**
         * Whether it is highly available.
         * @type {boolean || null}
         */
        this.HaFlag = null;

        /**
         * User VPCID
         * @type {string || null}
         */
        this.UserVPCId = null;

        /**
         * User subnet ID
         * @type {string || null}
         */
        this.UserSubnetId = null;

        /**
         * Product version number
         * @type {string || null}
         */
        this.ProductVersion = null;

        /**
         * Payment type
         * @type {ChargeProperties || null}
         */
        this.ChargeProperties = null;

        /**
         * Instance name
         * @type {string || null}
         */
        this.InstanceName = null;

        /**
         * Database password
         * @type {string || null}
         */
        this.DorisUserPwd = null;

        /**
         * Tag list
         * @type {Array.<Tag> || null}
         */
        this.Tags = null;

        /**
         * High availability type:
0 indicates non-high availability (only one FE, FeSpec.CreateInstanceSpec.Count=1),
1 indicates read high availability (at least 3 FEs must be deployed, FeSpec.CreateInstanceSpec.Count>=3, and it must be an odd number),
2 indicates read and write high availability (at least 5 FEs must be deployed, FeSpec.CreateInstanceSpec.Count>=5, and it must be an odd number).
         * @type {number || null}
         */
        this.HaType = null;

        /**
         * Whether the table name is case sensitive, 0 refers to sensitive, 1 refers to insensitive, compared in lowercase; 2 refers to insensitive, and the table name is changed to lowercase for storage.
         * @type {number || null}
         */
        this.CaseSensitive = null;

        /**
         * Whether to enable multi-availability zone.
         * @type {boolean || null}
         */
        this.EnableMultiZones = null;

        /**
         * After the Multi-AZ is enabled, all user's Availability Zones and Subnets information are shown.
         * @type {NetworkInfo || null}
         */
        this.UserMultiZoneInfos = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Zone = 'Zone' in params ? params.Zone : null;

        if (params.FeSpec) {
            let obj = new CreateInstanceSpec();
            obj.deserialize(params.FeSpec)
            this.FeSpec = obj;
        }

        if (params.BeSpec) {
            let obj = new CreateInstanceSpec();
            obj.deserialize(params.BeSpec)
            this.BeSpec = obj;
        }
        this.HaFlag = 'HaFlag' in params ? params.HaFlag : null;
        this.UserVPCId = 'UserVPCId' in params ? params.UserVPCId : null;
        this.UserSubnetId = 'UserSubnetId' in params ? params.UserSubnetId : null;
        this.ProductVersion = 'ProductVersion' in params ? params.ProductVersion : null;

        if (params.ChargeProperties) {
            let obj = new ChargeProperties();
            obj.deserialize(params.ChargeProperties)
            this.ChargeProperties = obj;
        }
        this.InstanceName = 'InstanceName' in params ? params.InstanceName : null;
        this.DorisUserPwd = 'DorisUserPwd' in params ? params.DorisUserPwd : null;

        if (params.Tags) {
            this.Tags = new Array();
            for (let z in params.Tags) {
                let obj = new Tag();
                obj.deserialize(params.Tags[z]);
                this.Tags.push(obj);
            }
        }
        this.HaType = 'HaType' in params ? params.HaType : null;
        this.CaseSensitive = 'CaseSensitive' in params ? params.CaseSensitive : null;
        this.EnableMultiZones = 'EnableMultiZones' in params ? params.EnableMultiZones : null;

        if (params.UserMultiZoneInfos) {
            let obj = new NetworkInfo();
            obj.deserialize(params.UserMultiZoneInfos)
            this.UserMultiZoneInfos = obj;
        }

    }
}

/**
 * Instance description information
 * @class
 */
class InstanceInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * Cluster instance ID, "cdw-xxxx" string type
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.InstanceId = null;

        /**
         * Cluster instance name
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.InstanceName = null;

        /**
         * Status,
Init is being created. Serving is running. 
Deleted indicates the cluster has been terminated. Deleting indicates the cluster is being terminated.
Modify indicates the cluster is being changed.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.Status = null;

        /**
         * Version
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.Version = null;

        /**
         * Region, ap-guangzhou
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.Region = null;

        /**
         * Availability zone, ap-guangzhou-3
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.Zone = null;

        /**
         * VPC name
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.VpcId = null;

        /**
         * Subnet name
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.SubnetId = null;

        /**
         * Payment type: hour and prepay
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.PayMode = null;

        /**
         * Creation time
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.CreateTime = null;

        /**
         * Expiration time
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.ExpireTime = null;

        /**
         * Data node description information
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {NodesSummary || null}
         */
        this.MasterSummary = null;

        /**
         * Zookeeper node description information
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {NodesSummary || null}
         */
        this.CoreSummary = null;

        /**
         * High availability, being true or false
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.HA = null;

        /**
         * High availability type:
0: non-high availability
1: read high availability
2: read-write high availability
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.HaType = null;

        /**
         * Access address. Example: 10.0.0.1:9000
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.AccessInfo = null;

        /**
         * Record ID, in numerical type
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.Id = null;

        /**
         * Region ID, indicating the region
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.RegionId = null;

        /**
         * Note about availability zone, such as Guangzhou Zone 2
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.ZoneDesc = null;

        /**
         * Error process description information
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.FlowMsg = null;

        /**
         * Status description, such as "running"
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.StatusDesc = null;

        /**
         * Automatic renewal marker
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {boolean || null}
         */
        this.RenewFlag = null;

        /**
         * Tag list
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {Array.<Tag> || null}
         */
        this.Tags = null;

        /**
         * Monitoring Information
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.Monitor = null;

        /**
         * Whether to enable logs.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {boolean || null}
         */
        this.HasClsTopic = null;

        /**
         * Log Topic ID
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.ClsTopicId = null;

        /**
         * Logset ID
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.ClsLogSetId = null;

        /**
         * Whether to support XML configuration management.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.EnableXMLConfig = null;

        /**
         * Region
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.RegionDesc = null;

        /**
         * Elastic network interface address
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.Eip = null;

        /**
         * Cold and hot stratification coefficient
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.CosMoveFactor = null;

        /**
         * external/local/yunti
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.Kind = null;

        /**
         * COS bucket
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.CosBucketName = null;

        /**
         * cbs
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {boolean || null}
         */
        this.CanAttachCbs = null;

        /**
         * Minor versions
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.BuildVersion = null;

        /**
         * Component Information
Note: The return type here is map[string]struct, not the string type displayed. You can refer to "Sample Value" to parse the data.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.Components = null;

        /**
         * Determine whether the audit log table has a catalog field.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.IfExistCatalog = null;

        /**
         * Page features, used to block some page entrances on the front end.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {Array.<string> || null}
         */
        this.Characteristic = null;

        /**
         * Timeout period, in seconds
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.RestartTimeout = null;

        /**
         * The timeout time for the graceful restart of the kernel. If it is -1, it means it is not set.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.GraceShutdownWaitSeconds = null;

        /**
         * Whether the table name is case sensitive, 0 refers to sensitive, 1 refers to insensitive, compared in lowercase; 2 refers to insensitive, and the table name is changed to lowercase for storage.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.CaseSensitive = null;

        /**
         * Whether users can bind security groups.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {boolean || null}
         */
        this.IsWhiteSGs = null;

        /**
         * Bound security group information
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {Array.<string> || null}
         */
        this.BindSGs = null;

        /**
         * Whether it is a multi-AZ.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {boolean || null}
         */
        this.EnableMultiZones = null;

        /**
         * User availability zone and subnet information
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.UserNetworkInfos = null;

        /**
         * Whether to enable hot and cold stratification. 0 refers to disabled, and 1 refers to enabled.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.EnableCoolDown = null;

        /**
         * COS buckets are used for hot and cold stratification
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.CoolDownBucket = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.InstanceId = 'InstanceId' in params ? params.InstanceId : null;
        this.InstanceName = 'InstanceName' in params ? params.InstanceName : null;
        this.Status = 'Status' in params ? params.Status : null;
        this.Version = 'Version' in params ? params.Version : null;
        this.Region = 'Region' in params ? params.Region : null;
        this.Zone = 'Zone' in params ? params.Zone : null;
        this.VpcId = 'VpcId' in params ? params.VpcId : null;
        this.SubnetId = 'SubnetId' in params ? params.SubnetId : null;
        this.PayMode = 'PayMode' in params ? params.PayMode : null;
        this.CreateTime = 'CreateTime' in params ? params.CreateTime : null;
        this.ExpireTime = 'ExpireTime' in params ? params.ExpireTime : null;

        if (params.MasterSummary) {
            let obj = new NodesSummary();
            obj.deserialize(params.MasterSummary)
            this.MasterSummary = obj;
        }

        if (params.CoreSummary) {
            let obj = new NodesSummary();
            obj.deserialize(params.CoreSummary)
            this.CoreSummary = obj;
        }
        this.HA = 'HA' in params ? params.HA : null;
        this.HaType = 'HaType' in params ? params.HaType : null;
        this.AccessInfo = 'AccessInfo' in params ? params.AccessInfo : null;
        this.Id = 'Id' in params ? params.Id : null;
        this.RegionId = 'RegionId' in params ? params.RegionId : null;
        this.ZoneDesc = 'ZoneDesc' in params ? params.ZoneDesc : null;
        this.FlowMsg = 'FlowMsg' in params ? params.FlowMsg : null;
        this.StatusDesc = 'StatusDesc' in params ? params.StatusDesc : null;
        this.RenewFlag = 'RenewFlag' in params ? params.RenewFlag : null;

        if (params.Tags) {
            this.Tags = new Array();
            for (let z in params.Tags) {
                let obj = new Tag();
                obj.deserialize(params.Tags[z]);
                this.Tags.push(obj);
            }
        }
        this.Monitor = 'Monitor' in params ? params.Monitor : null;
        this.HasClsTopic = 'HasClsTopic' in params ? params.HasClsTopic : null;
        this.ClsTopicId = 'ClsTopicId' in params ? params.ClsTopicId : null;
        this.ClsLogSetId = 'ClsLogSetId' in params ? params.ClsLogSetId : null;
        this.EnableXMLConfig = 'EnableXMLConfig' in params ? params.EnableXMLConfig : null;
        this.RegionDesc = 'RegionDesc' in params ? params.RegionDesc : null;
        this.Eip = 'Eip' in params ? params.Eip : null;
        this.CosMoveFactor = 'CosMoveFactor' in params ? params.CosMoveFactor : null;
        this.Kind = 'Kind' in params ? params.Kind : null;
        this.CosBucketName = 'CosBucketName' in params ? params.CosBucketName : null;
        this.CanAttachCbs = 'CanAttachCbs' in params ? params.CanAttachCbs : null;
        this.BuildVersion = 'BuildVersion' in params ? params.BuildVersion : null;
        this.Components = 'Components' in params ? params.Components : null;
        this.IfExistCatalog = 'IfExistCatalog' in params ? params.IfExistCatalog : null;
        this.Characteristic = 'Characteristic' in params ? params.Characteristic : null;
        this.RestartTimeout = 'RestartTimeout' in params ? params.RestartTimeout : null;
        this.GraceShutdownWaitSeconds = 'GraceShutdownWaitSeconds' in params ? params.GraceShutdownWaitSeconds : null;
        this.CaseSensitive = 'CaseSensitive' in params ? params.CaseSensitive : null;
        this.IsWhiteSGs = 'IsWhiteSGs' in params ? params.IsWhiteSGs : null;
        this.BindSGs = 'BindSGs' in params ? params.BindSGs : null;
        this.EnableMultiZones = 'EnableMultiZones' in params ? params.EnableMultiZones : null;
        this.UserNetworkInfos = 'UserNetworkInfos' in params ? params.UserNetworkInfos : null;
        this.EnableCoolDown = 'EnableCoolDown' in params ? params.EnableCoolDown : null;
        this.CoolDownBucket = 'CoolDownBucket' in params ? params.CoolDownBucket : null;

    }
}

/**
 * DescribeInstances response structure.
 * @class
 */
class DescribeInstancesResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Total Number of Instances
         * @type {number || null}
         */
        this.TotalCount = null;

        /**
         * Quantities of instances array
         * @type {Array.<InstanceInfo> || null}
         */
        this.InstancesList = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;

        if (params.InstancesList) {
            this.InstancesList = new Array();
            for (let z in params.InstancesList) {
                let obj = new InstanceInfo();
                obj.deserialize(params.InstancesList[z]);
                this.InstancesList.push(obj);
            }
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeInstances request structure.
 * @class
 */
class DescribeInstancesRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * The name of the cluster ID for the search
         * @type {string || null}
         */
        this.SearchInstanceId = null;

        /**
         * The cluster name for the search
         * @type {string || null}
         */
        this.SearchInstanceName = null;

        /**
         * Pagination parameters. The first page is 0, and the second page is 10.
         * @type {number || null}
         */
        this.Offset = null;

        /**
         * Pagination parameters. The pagination step length is 10 by default.
         * @type {number || null}
         */
        this.Limit = null;

        /**
         * Search tag list
         * @type {Array.<SearchTags> || null}
         */
        this.SearchTags = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.SearchInstanceId = 'SearchInstanceId' in params ? params.SearchInstanceId : null;
        this.SearchInstanceName = 'SearchInstanceName' in params ? params.SearchInstanceName : null;
        this.Offset = 'Offset' in params ? params.Offset : null;
        this.Limit = 'Limit' in params ? params.Limit : null;

        if (params.SearchTags) {
            this.SearchTags = new Array();
            for (let z in params.SearchTags) {
                let obj = new SearchTags();
                obj.deserialize(params.SearchTags[z]);
                this.SearchTags.push(obj);
            }
        }

    }
}

/**
 * DescribeSlowQueryRecords request structure.
 * @class
 */
class DescribeSlowQueryRecordsRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Instance ID
         * @type {string || null}
         */
        this.InstanceId = null;

        /**
         * Slow log time
         * @type {number || null}
         */
        this.QueryDurationMs = null;

        /**
         * Start time
         * @type {string || null}
         */
        this.StartTime = null;

        /**
         * End time
         * @type {string || null}
         */
        this.EndTime = null;

        /**
         * Paging
         * @type {number || null}
         */
        this.PageSize = null;

        /**
         * Paging
         * @type {number || null}
         */
        this.PageNum = null;

        /**
         * Sort parameters
         * @type {string || null}
         */
        this.DurationMs = null;

        /**
         * Database name
         * @type {Array.<string> || null}
         */
        this.DbName = null;

        /**
         * Whether it is a query. 0 indicates no, and 1 indicates yes.
         * @type {number || null}
         */
        this.IsQuery = null;

        /**
         * catalog name
         * @type {Array.<string> || null}
         */
        this.CatalogName = null;

        /**
         * SQL name
         * @type {string || null}
         */
        this.Sql = null;

        /**
         * ReadRows sort field
         * @type {string || null}
         */
        this.ReadRows = null;

        /**
         * ResultBytes sort field
         * @type {string || null}
         */
        this.ResultBytes = null;

        /**
         * MemoryUsage sort field
         * @type {string || null}
         */
        this.MemoryUsage = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.InstanceId = 'InstanceId' in params ? params.InstanceId : null;
        this.QueryDurationMs = 'QueryDurationMs' in params ? params.QueryDurationMs : null;
        this.StartTime = 'StartTime' in params ? params.StartTime : null;
        this.EndTime = 'EndTime' in params ? params.EndTime : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;
        this.PageNum = 'PageNum' in params ? params.PageNum : null;
        this.DurationMs = 'DurationMs' in params ? params.DurationMs : null;
        this.DbName = 'DbName' in params ? params.DbName : null;
        this.IsQuery = 'IsQuery' in params ? params.IsQuery : null;
        this.CatalogName = 'CatalogName' in params ? params.CatalogName : null;
        this.Sql = 'Sql' in params ? params.Sql : null;
        this.ReadRows = 'ReadRows' in params ? params.ReadRows : null;
        this.ResultBytes = 'ResultBytes' in params ? params.ResultBytes : null;
        this.MemoryUsage = 'MemoryUsage' in params ? params.MemoryUsage : null;

    }
}

/**
 * DescribeClusterConfigs request structure.
 * @class
 */
class DescribeClusterConfigsRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Cluster instance ID
         * @type {string || null}
         */
        this.InstanceId = null;

        /**
         * 0 indicates public cloud query, and 1 Qinge query. Qinge query shows all that needs to be displayed.
         * @type {number || null}
         */
        this.ConfigType = null;

        /**
         * Search for files with fuzzy keywords
         * @type {string || null}
         */
        this.FileName = null;

        /**
         * 0 indicates cluster dimension and 1 node dimension
         * @type {number || null}
         */
        this.ClusterConfigType = null;

        /**
         * eth0's IP address
         * @type {string || null}
         */
        this.IPAddress = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.InstanceId = 'InstanceId' in params ? params.InstanceId : null;
        this.ConfigType = 'ConfigType' in params ? params.ConfigType : null;
        this.FileName = 'FileName' in params ? params.FileName : null;
        this.ClusterConfigType = 'ClusterConfigType' in params ? params.ClusterConfigType : null;
        this.IPAddress = 'IPAddress' in params ? params.IPAddress : null;

    }
}

/**
 * ResizeDisk response structure.
 * @class
 */
class ResizeDiskResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Instance ID
         * @type {string || null}
         */
        this.InstanceId = null;

        /**
         * Process ID
         * @type {string || null}
         */
        this.FlowId = null;

        /**
         * Error message
         * @type {string || null}
         */
        this.ErrorMsg = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.InstanceId = 'InstanceId' in params ? params.InstanceId : null;
        this.FlowId = 'FlowId' in params ? params.FlowId : null;
        this.ErrorMsg = 'ErrorMsg' in params ? params.ErrorMsg : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * Specifications of nodes in the cluster and disk specifications description
 * @class
 */
class AttachCBSSpec extends  AbstractModel {
    constructor(){
        super();

        /**
         * Node disk type, such as CLOUD_SSD"\"CLOUD_PREMIUM
         * @type {string || null}
         */
        this.DiskType = null;

        /**
         * Disk capacity, in GB
         * @type {number || null}
         */
        this.DiskSize = null;

        /**
         * Total number of disks
         * @type {number || null}
         */
        this.DiskCount = null;

        /**
         * Description
         * @type {string || null}
         */
        this.DiskDesc = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.DiskType = 'DiskType' in params ? params.DiskType : null;
        this.DiskSize = 'DiskSize' in params ? params.DiskSize : null;
        this.DiskCount = 'DiskCount' in params ? params.DiskCount : null;
        this.DiskDesc = 'DiskDesc' in params ? params.DiskDesc : null;

    }
}

/**
 * Database audit
 * @class
 */
class DataBaseAuditRecord extends  AbstractModel {
    constructor(){
        super();

        /**
         * Query user
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.OsUser = null;

        /**
         * Query ID
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.InitialQueryId = null;

        /**
         * SQL statement
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.Sql = null;

        /**
         * Start time
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.QueryStartTime = null;

        /**
         * Execution duration
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.DurationMs = null;

        /**
         * The number of read rows
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.ReadRows = null;

        /**
         * Total number of read bytes
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.ResultRows = null;

        /**
         * Result bytes
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.ResultBytes = null;

        /**
         * Memory
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.MemoryUsage = null;

        /**
         * Initial query IP
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.InitialAddress = null;

        /**
         * Database
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.DbName = null;

        /**
         * SQL type
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.SqlType = null;

        /**
         * Catalog name
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.Catalog = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.OsUser = 'OsUser' in params ? params.OsUser : null;
        this.InitialQueryId = 'InitialQueryId' in params ? params.InitialQueryId : null;
        this.Sql = 'Sql' in params ? params.Sql : null;
        this.QueryStartTime = 'QueryStartTime' in params ? params.QueryStartTime : null;
        this.DurationMs = 'DurationMs' in params ? params.DurationMs : null;
        this.ReadRows = 'ReadRows' in params ? params.ReadRows : null;
        this.ResultRows = 'ResultRows' in params ? params.ResultRows : null;
        this.ResultBytes = 'ResultBytes' in params ? params.ResultBytes : null;
        this.MemoryUsage = 'MemoryUsage' in params ? params.MemoryUsage : null;
        this.InitialAddress = 'InitialAddress' in params ? params.InitialAddress : null;
        this.DbName = 'DbName' in params ? params.DbName : null;
        this.SqlType = 'SqlType' in params ? params.SqlType : null;
        this.Catalog = 'Catalog' in params ? params.Catalog : null;

    }
}

/**
 * ScaleOutInstance request structure.
 * @class
 */
class ScaleOutInstanceRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Cluster ID
         * @type {string || null}
         */
        this.InstanceId = null;

        /**
         * Role (MATER/CORE), MASTER corresponds to FE, CORE corresponds to BE.
         * @type {string || null}
         */
        this.Type = null;

        /**
         * Number of nodes
         * @type {number || null}
         */
        this.NodeCount = null;

        /**
         * Cluster high availability type after scaled out: 0 indicates non-high availability, 1 indicates read high availability, and 2 indicates read-write high availability.
         * @type {number || null}
         */
        this.HaType = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.InstanceId = 'InstanceId' in params ? params.InstanceId : null;
        this.Type = 'Type' in params ? params.Type : null;
        this.NodeCount = 'NodeCount' in params ? params.NodeCount : null;
        this.HaType = 'HaType' in params ? params.HaType : null;

    }
}

/**
 * DescribeSlowQueryRecords response structure.
 * @class
 */
class DescribeSlowQueryRecordsResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Total
         * @type {number || null}
         */
        this.TotalCount = null;

        /**
         * Record list
         * @type {Array.<SlowQueryRecord> || null}
         */
        this.SlowQueryRecords = null;

        /**
         * All database names
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {Array.<string> || null}
         */
        this.DBNameList = null;

        /**
         * All catalog names
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {Array.<string> || null}
         */
        this.CatalogNameList = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;

        if (params.SlowQueryRecords) {
            this.SlowQueryRecords = new Array();
            for (let z in params.SlowQueryRecords) {
                let obj = new SlowQueryRecord();
                obj.deserialize(params.SlowQueryRecords[z]);
                this.SlowQueryRecords.push(obj);
            }
        }
        this.DBNameList = 'DBNameList' in params ? params.DBNameList : null;
        this.CatalogNameList = 'CatalogNameList' in params ? params.CatalogNameList : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeDatabaseAuditRecords response structure.
 * @class
 */
class DescribeDatabaseAuditRecordsResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Total
         * @type {number || null}
         */
        this.TotalCount = null;

        /**
         * Record list
         * @type {DataBaseAuditRecord || null}
         */
        this.SlowQueryRecords = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TotalCount = 'TotalCount' in params ? params.TotalCount : null;

        if (params.SlowQueryRecords) {
            let obj = new DataBaseAuditRecord();
            obj.deserialize(params.SlowQueryRecords)
            this.SlowQueryRecords = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeInstance response structure.
 * @class
 */
class DescribeInstanceResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Instance description information
         * @type {InstanceInfo || null}
         */
        this.InstanceInfo = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }

        if (params.InstanceInfo) {
            let obj = new InstanceInfo();
            obj.deserialize(params.InstanceInfo)
            this.InstanceInfo = obj;
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * RestartClusterForNode request structure.
 * @class
 */
class RestartClusterForNodeRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Cluster ID, such as cdwch-xxxx
         * @type {string || null}
         */
        this.InstanceId = null;

        /**
         * Configuration file's name
         * @type {string || null}
         */
        this.ConfigName = null;

        /**
         * Each batch of restarts
         * @type {number || null}
         */
        this.BatchSize = null;

        /**
         * Restart node
         * @type {Array.<string> || null}
         */
        this.NodeList = null;

        /**
         * False means non-rolling restart, and true means rolling restart.
         * @type {boolean || null}
         */
        this.RollingRestart = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.InstanceId = 'InstanceId' in params ? params.InstanceId : null;
        this.ConfigName = 'ConfigName' in params ? params.ConfigName : null;
        this.BatchSize = 'BatchSize' in params ? params.BatchSize : null;
        this.NodeList = 'NodeList' in params ? params.NodeList : null;
        this.RollingRestart = 'RollingRestart' in params ? params.RollingRestart : null;

    }
}

/**
 * ScaleUpInstance request structure.
 * @class
 */
class ScaleUpInstanceRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Cluster ID
         * @type {string || null}
         */
        this.InstanceId = null;

        /**
         * Node specifications
         * @type {string || null}
         */
        this.SpecName = null;

        /**
         * Role (MATER/CORE). MASTER corresponds to FE, and CORE corresponds to BE.
         * @type {string || null}
         */
        this.Type = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.InstanceId = 'InstanceId' in params ? params.InstanceId : null;
        this.SpecName = 'SpecName' in params ? params.SpecName : null;
        this.Type = 'Type' in params ? params.Type : null;

    }
}

/**
 * Node role description information
 * @class
 */
class NodesSummary extends  AbstractModel {
    constructor(){
        super();

        /**
         * Model, such as S1
         * @type {string || null}
         */
        this.Spec = null;

        /**
         * Number of nodes
         * @type {number || null}
         */
        this.NodeSize = null;

        /**
         * Number of CPU cores, in counts
         * @type {number || null}
         */
        this.Core = null;

        /**
         * Memory size, in GB
         * @type {number || null}
         */
        this.Memory = null;

        /**
         * Disk size, in GB
         * @type {number || null}
         */
        this.Disk = null;

        /**
         * Disk type
         * @type {string || null}
         */
        this.DiskType = null;

        /**
         * Disk description
         * @type {string || null}
         */
        this.DiskDesc = null;

        /**
         * Information of mounted cloud disks
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {AttachCBSSpec || null}
         */
        this.AttachCBSSpec = null;

        /**
         * Sub-product name
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.SubProductType = null;

        /**
         * Specified cores
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.SpecCore = null;

        /**
         * Specified memory
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.SpecMemory = null;

        /**
         * Disk size
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.DiskCount = null;

        /**
         * Whether it is encrypted.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.Encrypt = null;

        /**
         * Maximum disk
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.MaxDiskSize = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Spec = 'Spec' in params ? params.Spec : null;
        this.NodeSize = 'NodeSize' in params ? params.NodeSize : null;
        this.Core = 'Core' in params ? params.Core : null;
        this.Memory = 'Memory' in params ? params.Memory : null;
        this.Disk = 'Disk' in params ? params.Disk : null;
        this.DiskType = 'DiskType' in params ? params.DiskType : null;
        this.DiskDesc = 'DiskDesc' in params ? params.DiskDesc : null;

        if (params.AttachCBSSpec) {
            let obj = new AttachCBSSpec();
            obj.deserialize(params.AttachCBSSpec)
            this.AttachCBSSpec = obj;
        }
        this.SubProductType = 'SubProductType' in params ? params.SubProductType : null;
        this.SpecCore = 'SpecCore' in params ? params.SpecCore : null;
        this.SpecMemory = 'SpecMemory' in params ? params.SpecMemory : null;
        this.DiskCount = 'DiskCount' in params ? params.DiskCount : null;
        this.Encrypt = 'Encrypt' in params ? params.Encrypt : null;
        this.MaxDiskSize = 'MaxDiskSize' in params ? params.MaxDiskSize : null;

    }
}

/**
 * Network information
 * @class
 */
class NetworkInfo extends  AbstractModel {
    constructor(){
        super();

        /**
         * Availability zone
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.Zone = null;

        /**
         * Subnet ID
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.SubnetId = null;

        /**
         * The number of available IP addresses in the current subnet
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.SubnetIpNum = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.Zone = 'Zone' in params ? params.Zone : null;
        this.SubnetId = 'SubnetId' in params ? params.SubnetId : null;
        this.SubnetIpNum = 'SubnetIpNum' in params ? params.SubnetIpNum : null;

    }
}

/**
 * Cluster specifications
 * @class
 */
class CreateInstanceSpec extends  AbstractModel {
    constructor(){
        super();

        /**
         * Specification name
         * @type {string || null}
         */
        this.SpecName = null;

        /**
         * Quantities
         * @type {number || null}
         */
        this.Count = null;

        /**
         * Cloud disk size
         * @type {number || null}
         */
        this.DiskSize = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.SpecName = 'SpecName' in params ? params.SpecName : null;
        this.Count = 'Count' in params ? params.Count : null;
        this.DiskSize = 'DiskSize' in params ? params.DiskSize : null;

    }
}

/**
 * The searched marker list on the list page
 * @class
 */
class SearchTags extends  AbstractModel {
    constructor(){
        super();

        /**
         * Tag key
         * @type {string || null}
         */
        this.TagKey = null;

        /**
         * Tag value
         * @type {string || null}
         */
        this.TagValue = null;

        /**
         * 1 means only the tag key is entered without a value, and 0 means both the key and the value are entered.
         * @type {number || null}
         */
        this.AllValue = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TagKey = 'TagKey' in params ? params.TagKey : null;
        this.TagValue = 'TagValue' in params ? params.TagValue : null;
        this.AllValue = 'AllValue' in params ? params.AllValue : null;

    }
}

/**
 * DescribeInstance request structure.
 * @class
 */
class DescribeInstanceRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Cluster instance ID
         * @type {string || null}
         */
        this.InstanceId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.InstanceId = 'InstanceId' in params ? params.InstanceId : null;

    }
}

/**
 * Return the configuration file content (key-value)
 * @class
 */
class ConfigKeyValue extends  AbstractModel {
    constructor(){
        super();

        /**
         * key
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.KeyName = null;

        /**
         * Value
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.Value = null;

        /**
         * Notes
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.Message = null;

        /**
         * 1 indicates read-only, 2 indicates editable but undeletable, and 3 indicates deletable.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.Display = null;

        /**
         * 0 means not supported, and 1 means hot update is supported.
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.SupportHotUpdate = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.KeyName = 'KeyName' in params ? params.KeyName : null;
        this.Value = 'Value' in params ? params.Value : null;
        this.Message = 'Message' in params ? params.Message : null;
        this.Display = 'Display' in params ? params.Display : null;
        this.SupportHotUpdate = 'SupportHotUpdate' in params ? params.SupportHotUpdate : null;

    }
}

/**
 * Tag description
 * @class
 */
class Tag extends  AbstractModel {
    constructor(){
        super();

        /**
         * Tag key
         * @type {string || null}
         */
        this.TagKey = null;

        /**
         * Tag value
         * @type {string || null}
         */
        this.TagValue = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.TagKey = 'TagKey' in params ? params.TagKey : null;
        this.TagValue = 'TagValue' in params ? params.TagValue : null;

    }
}

/**
 * DescribeInstanceState response structure.
 * @class
 */
class DescribeInstanceStateResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Cluster status. Example: Serving
         * @type {string || null}
         */
        this.InstanceState = null;

        /**
         * Creation time of cluster operation
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.FlowCreateTime = null;

        /**
         * Cluster operation name
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.FlowName = null;

        /**
         * Cluster operation progress
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {number || null}
         */
        this.FlowProgress = null;

        /**
         * Cluster status description. Example: running
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.InstanceStateDesc = null;

        /**
         * Cluster process error messages, such as "Creation failed, insufficient resources"
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {string || null}
         */
        this.FlowMsg = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.InstanceState = 'InstanceState' in params ? params.InstanceState : null;
        this.FlowCreateTime = 'FlowCreateTime' in params ? params.FlowCreateTime : null;
        this.FlowName = 'FlowName' in params ? params.FlowName : null;
        this.FlowProgress = 'FlowProgress' in params ? params.FlowProgress : null;
        this.InstanceStateDesc = 'InstanceStateDesc' in params ? params.InstanceStateDesc : null;
        this.FlowMsg = 'FlowMsg' in params ? params.FlowMsg : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeDatabaseAuditRecords request structure.
 * @class
 */
class DescribeDatabaseAuditRecordsRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Instance ID
         * @type {string || null}
         */
        this.InstanceId = null;

        /**
         * Start time
         * @type {string || null}
         */
        this.StartTime = null;

        /**
         * End time
         * @type {string || null}
         */
        this.EndTime = null;

        /**
         * Paging
         * @type {number || null}
         */
        this.PageSize = null;

        /**
         * Paging
         * @type {number || null}
         */
        this.PageNum = null;

        /**
         * Sort parameters
         * @type {string || null}
         */
        this.OrderType = null;

        /**
         * User
         * @type {string || null}
         */
        this.User = null;

        /**
         * Database
         * @type {string || null}
         */
        this.DbName = null;

        /**
         * SQL type
         * @type {string || null}
         */
        this.SqlType = null;

        /**
         * SQL statement
         * @type {string || null}
         */
        this.Sql = null;

        /**
         * Users (multiple selections)
         * @type {Array.<string> || null}
         */
        this.Users = null;

        /**
         * Databases (multiple selections)
         * @type {Array.<string> || null}
         */
        this.DbNames = null;

        /**
         * SQL types (multiple selections)
         * @type {Array.<string> || null}
         */
        this.SqlTypes = null;

        /**
         * Catalog names (multiple selections)
         * @type {Array.<string> || null}
         */
        this.Catalogs = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.InstanceId = 'InstanceId' in params ? params.InstanceId : null;
        this.StartTime = 'StartTime' in params ? params.StartTime : null;
        this.EndTime = 'EndTime' in params ? params.EndTime : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;
        this.PageNum = 'PageNum' in params ? params.PageNum : null;
        this.OrderType = 'OrderType' in params ? params.OrderType : null;
        this.User = 'User' in params ? params.User : null;
        this.DbName = 'DbName' in params ? params.DbName : null;
        this.SqlType = 'SqlType' in params ? params.SqlType : null;
        this.Sql = 'Sql' in params ? params.Sql : null;
        this.Users = 'Users' in params ? params.Users : null;
        this.DbNames = 'DbNames' in params ? params.DbNames : null;
        this.SqlTypes = 'SqlTypes' in params ? params.SqlTypes : null;
        this.Catalogs = 'Catalogs' in params ? params.Catalogs : null;

    }
}

/**
 * DescribeInstanceNodesInfo request structure.
 * @class
 */
class DescribeInstanceNodesInfoRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Cluster ID
         * @type {string || null}
         */
        this.InstanceID = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.InstanceID = 'InstanceID' in params ? params.InstanceID : null;

    }
}

/**
 * DescribeDatabaseAuditDownload response structure.
 * @class
 */
class DescribeDatabaseAuditDownloadResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * The cos address of the log
         * @type {string || null}
         */
        this.CosUrl = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.CosUrl = 'CosUrl' in params ? params.CosUrl : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * DescribeDatabaseAuditDownload request structure.
 * @class
 */
class DescribeDatabaseAuditDownloadRequest extends  AbstractModel {
    constructor(){
        super();

        /**
         * Instance ID
         * @type {string || null}
         */
        this.InstanceId = null;

        /**
         * Start time
         * @type {string || null}
         */
        this.StartTime = null;

        /**
         * End time
         * @type {string || null}
         */
        this.EndTime = null;

        /**
         * Paging
         * @type {number || null}
         */
        this.PageSize = null;

        /**
         * Paging
         * @type {number || null}
         */
        this.PageNum = null;

        /**
         * Sort parameters
         * @type {string || null}
         */
        this.OrderType = null;

        /**
         * User
         * @type {string || null}
         */
        this.User = null;

        /**
         * Database
         * @type {string || null}
         */
        this.DbName = null;

        /**
         * SQL type
         * @type {string || null}
         */
        this.SqlType = null;

        /**
         * SQL statement
         * @type {string || null}
         */
        this.Sql = null;

        /**
         * Users (multiple selections)
         * @type {Array.<string> || null}
         */
        this.Users = null;

        /**
         * Databases (multiple selections)
         * @type {Array.<string> || null}
         */
        this.DbNames = null;

        /**
         * SQL types (multiple selections)
         * @type {Array.<string> || null}
         */
        this.SqlTypes = null;

        /**
         * Catalog names (multiple selections)
         * @type {Array.<string> || null}
         */
        this.Catalogs = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.InstanceId = 'InstanceId' in params ? params.InstanceId : null;
        this.StartTime = 'StartTime' in params ? params.StartTime : null;
        this.EndTime = 'EndTime' in params ? params.EndTime : null;
        this.PageSize = 'PageSize' in params ? params.PageSize : null;
        this.PageNum = 'PageNum' in params ? params.PageNum : null;
        this.OrderType = 'OrderType' in params ? params.OrderType : null;
        this.User = 'User' in params ? params.User : null;
        this.DbName = 'DbName' in params ? params.DbName : null;
        this.SqlType = 'SqlType' in params ? params.SqlType : null;
        this.Sql = 'Sql' in params ? params.Sql : null;
        this.Users = 'Users' in params ? params.Users : null;
        this.DbNames = 'DbNames' in params ? params.DbNames : null;
        this.SqlTypes = 'SqlTypes' in params ? params.SqlTypes : null;
        this.Catalogs = 'Catalogs' in params ? params.Catalogs : null;

    }
}

/**
 * DescribeInstanceNodesInfo response structure.
 * @class
 */
class DescribeInstanceNodesInfoResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Be node
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {Array.<string> || null}
         */
        this.BeNodes = null;

        /**
         * Fe node
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {Array.<string> || null}
         */
        this.FeNodes = null;

        /**
         * Fe master node
         * @type {string || null}
         */
        this.FeMaster = null;

        /**
         * Be node information
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {Array.<NodeInfo> || null}
         */
        this.BeNodeInfos = null;

        /**
         * Fe node information
Note: This field may return null, indicating that no valid values can be obtained.
         * @type {Array.<NodeInfo> || null}
         */
        this.FeNodeInfos = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.BeNodes = 'BeNodes' in params ? params.BeNodes : null;
        this.FeNodes = 'FeNodes' in params ? params.FeNodes : null;
        this.FeMaster = 'FeMaster' in params ? params.FeMaster : null;

        if (params.BeNodeInfos) {
            this.BeNodeInfos = new Array();
            for (let z in params.BeNodeInfos) {
                let obj = new NodeInfo();
                obj.deserialize(params.BeNodeInfos[z]);
                this.BeNodeInfos.push(obj);
            }
        }

        if (params.FeNodeInfos) {
            this.FeNodeInfos = new Array();
            for (let z in params.FeNodeInfos) {
                let obj = new NodeInfo();
                obj.deserialize(params.FeNodeInfos[z]);
                this.FeNodeInfos.push(obj);
            }
        }
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

/**
 * ScaleUpInstance response structure.
 * @class
 */
class ScaleUpInstanceResponse extends  AbstractModel {
    constructor(){
        super();

        /**
         * Process ID
         * @type {string || null}
         */
        this.FlowId = null;

        /**
         * Instance ID
         * @type {string || null}
         */
        this.InstanceId = null;

        /**
         * Error message
         * @type {string || null}
         */
        this.ErrorMsg = null;

        /**
         * The unique request ID, generated by the server, will be returned for every request (if the request fails to reach the server for other reasons, the request will not obtain a RequestId). RequestId is required for locating a problem.
         * @type {string || null}
         */
        this.RequestId = null;

    }

    /**
     * @private
     */
    deserialize(params) {
        if (!params) {
            return;
        }
        this.FlowId = 'FlowId' in params ? params.FlowId : null;
        this.InstanceId = 'InstanceId' in params ? params.InstanceId : null;
        this.ErrorMsg = 'ErrorMsg' in params ? params.ErrorMsg : null;
        this.RequestId = 'RequestId' in params ? params.RequestId : null;

    }
}

module.exports = {
    ModifyInstanceResponse: ModifyInstanceResponse,
    DestroyInstanceResponse: DestroyInstanceResponse,
    DescribeSlowQueryRecordsDownloadRequest: DescribeSlowQueryRecordsDownloadRequest,
    ResizeDiskRequest: ResizeDiskRequest,
    NodeInfo: NodeInfo,
    RestartClusterForNodeResponse: RestartClusterForNodeResponse,
    DescribeInstanceNodesResponse: DescribeInstanceNodesResponse,
    DescribeInstanceStateRequest: DescribeInstanceStateRequest,
    DescribeClusterConfigsResponse: DescribeClusterConfigsResponse,
    ScaleOutInstanceResponse: ScaleOutInstanceResponse,
    SlowQueryRecord: SlowQueryRecord,
    DescribeInstanceNodesRequest: DescribeInstanceNodesRequest,
    ModifyInstanceRequest: ModifyInstanceRequest,
    ChargeProperties: ChargeProperties,
    ClusterConfigsInfoFromEMR: ClusterConfigsInfoFromEMR,
    InstanceNode: InstanceNode,
    CreateInstanceNewResponse: CreateInstanceNewResponse,
    DescribeSlowQueryRecordsDownloadResponse: DescribeSlowQueryRecordsDownloadResponse,
    DestroyInstanceRequest: DestroyInstanceRequest,
    CreateInstanceNewRequest: CreateInstanceNewRequest,
    InstanceInfo: InstanceInfo,
    DescribeInstancesResponse: DescribeInstancesResponse,
    DescribeInstancesRequest: DescribeInstancesRequest,
    DescribeSlowQueryRecordsRequest: DescribeSlowQueryRecordsRequest,
    DescribeClusterConfigsRequest: DescribeClusterConfigsRequest,
    ResizeDiskResponse: ResizeDiskResponse,
    AttachCBSSpec: AttachCBSSpec,
    DataBaseAuditRecord: DataBaseAuditRecord,
    ScaleOutInstanceRequest: ScaleOutInstanceRequest,
    DescribeSlowQueryRecordsResponse: DescribeSlowQueryRecordsResponse,
    DescribeDatabaseAuditRecordsResponse: DescribeDatabaseAuditRecordsResponse,
    DescribeInstanceResponse: DescribeInstanceResponse,
    RestartClusterForNodeRequest: RestartClusterForNodeRequest,
    ScaleUpInstanceRequest: ScaleUpInstanceRequest,
    NodesSummary: NodesSummary,
    NetworkInfo: NetworkInfo,
    CreateInstanceSpec: CreateInstanceSpec,
    SearchTags: SearchTags,
    DescribeInstanceRequest: DescribeInstanceRequest,
    ConfigKeyValue: ConfigKeyValue,
    Tag: Tag,
    DescribeInstanceStateResponse: DescribeInstanceStateResponse,
    DescribeDatabaseAuditRecordsRequest: DescribeDatabaseAuditRecordsRequest,
    DescribeInstanceNodesInfoRequest: DescribeInstanceNodesInfoRequest,
    DescribeDatabaseAuditDownloadResponse: DescribeDatabaseAuditDownloadResponse,
    DescribeDatabaseAuditDownloadRequest: DescribeDatabaseAuditDownloadRequest,
    DescribeInstanceNodesInfoResponse: DescribeInstanceNodesInfoResponse,
    ScaleUpInstanceResponse: ScaleUpInstanceResponse,

}
