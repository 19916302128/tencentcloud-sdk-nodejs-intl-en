/*
 * Copyright (c) 2018 THL A29 Limited, a Tencent company. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
const models = require("./models");
const AbstractClient = require('../../common/abstract_client')
const UpdateKeyDescriptionResponse = models.UpdateKeyDescriptionResponse;
const DisableKeysRequest = models.DisableKeysRequest;
const AlgorithmInfo = models.AlgorithmInfo;
const UpdateAliasRequest = models.UpdateAliasRequest;
const ReEncryptRequest = models.ReEncryptRequest;
const GenerateDataKeyRequest = models.GenerateDataKeyRequest;
const GenerateDataKeyResponse = models.GenerateDataKeyResponse;
const AsymmetricRsaDecryptRequest = models.AsymmetricRsaDecryptRequest;
const EnableKeyRotationRequest = models.EnableKeyRotationRequest;
const EnableKeyRotationResponse = models.EnableKeyRotationResponse;
const CreateKeyRequest = models.CreateKeyRequest;
const EnableKeysResponse = models.EnableKeysResponse;
const DisableKeyResponse = models.DisableKeyResponse;
const GetParametersForImportRequest = models.GetParametersForImportRequest;
const DeleteImportedKeyMaterialResponse = models.DeleteImportedKeyMaterialResponse;
const CreateKeyResponse = models.CreateKeyResponse;
const ReEncryptResponse = models.ReEncryptResponse;
const DescribeKeyRequest = models.DescribeKeyRequest;
const CancelKeyDeletionRequest = models.CancelKeyDeletionRequest;
const GenerateRandomRequest = models.GenerateRandomRequest;
const DeleteImportedKeyMaterialRequest = models.DeleteImportedKeyMaterialRequest;
const ListAlgorithmsResponse = models.ListAlgorithmsResponse;
const EnableKeyResponse = models.EnableKeyResponse;
const ScheduleKeyDeletionRequest = models.ScheduleKeyDeletionRequest;
const DisableKeysResponse = models.DisableKeysResponse;
const ImportKeyMaterialRequest = models.ImportKeyMaterialRequest;
const GetKeyRotationStatusResponse = models.GetKeyRotationStatusResponse;
const AsymmetricRsaDecryptResponse = models.AsymmetricRsaDecryptResponse;
const ImportKeyMaterialResponse = models.ImportKeyMaterialResponse;
const EncryptRequest = models.EncryptRequest;
const AsymmetricSm2DecryptRequest = models.AsymmetricSm2DecryptRequest;
const DecryptResponse = models.DecryptResponse;
const EnableKeyRequest = models.EnableKeyRequest;
const GetKeyRotationStatusRequest = models.GetKeyRotationStatusRequest;
const GetServiceStatusResponse = models.GetServiceStatusResponse;
const DescribeKeysResponse = models.DescribeKeysResponse;
const GetPublicKeyResponse = models.GetPublicKeyResponse;
const ListKeyDetailResponse = models.ListKeyDetailResponse;
const CancelKeyDeletionResponse = models.CancelKeyDeletionResponse;
const ListKeysRequest = models.ListKeysRequest;
const ListKeysResponse = models.ListKeysResponse;
const KeyMetadata = models.KeyMetadata;
const AsymmetricSm2DecryptResponse = models.AsymmetricSm2DecryptResponse;
const DisableKeyRotationResponse = models.DisableKeyRotationResponse;
const ListAlgorithmsRequest = models.ListAlgorithmsRequest;
const UpdateAliasResponse = models.UpdateAliasResponse;
const ScheduleKeyDeletionResponse = models.ScheduleKeyDeletionResponse;
const GetParametersForImportResponse = models.GetParametersForImportResponse;
const DecryptRequest = models.DecryptRequest;
const ListKeyDetailRequest = models.ListKeyDetailRequest;
const UpdateKeyDescriptionRequest = models.UpdateKeyDescriptionRequest;
const DisableKeyRequest = models.DisableKeyRequest;
const EnableKeysRequest = models.EnableKeysRequest;
const GenerateRandomResponse = models.GenerateRandomResponse;
const DescribeKeyResponse = models.DescribeKeyResponse;
const EncryptResponse = models.EncryptResponse;
const DescribeKeysRequest = models.DescribeKeysRequest;
const GetPublicKeyRequest = models.GetPublicKeyRequest;
const GetServiceStatusRequest = models.GetServiceStatusRequest;
const DisableKeyRotationRequest = models.DisableKeyRotationRequest;


/**
 * kms client
 * @class
 */
class KmsClient extends AbstractClient {

    constructor(credential, region, profile) {
        super("kms.tencentcloudapi.com", "2019-01-18", credential, region, profile);
    }
    
    /**
     * This API is used to encrypt any data up to 4KB. It can be used to encrypt database passwords, RSA Key, or other small sensitive information. For application data encryption, use the DataKey generated by GenerateDataKey to perform local data encryption and decryption operations
     * @param {EncryptRequest} req
     * @param {function(string, EncryptResponse):void} cb
     * @public
     */
    Encrypt(req, cb) {
        let resp = new EncryptResponse();
        this.request("Encrypt", req, resp, cb);
    }

    /**
     * This API is used to delete the imported key material. It is only valid for EXTERNAL CMKs. Specifically, it puts a CMK into `PendingImport` status instead of deleting the CMK, so that the CMK can be used again after key material is reimported. To delete the CMK completely, please call the `ScheduleKeyDeletion` API.
     * @param {DeleteImportedKeyMaterialRequest} req
     * @param {function(string, DeleteImportedKeyMaterialResponse):void} cb
     * @public
     */
    DeleteImportedKeyMaterial(req, cb) {
        let resp = new DeleteImportedKeyMaterialResponse();
        this.request("DeleteImportedKeyMaterial", req, resp, cb);
    }

    /**
     * This API is used to modify the alias of a CMK. CMKs in `PendingDelete` status cannot be modified.
     * @param {UpdateAliasRequest} req
     * @param {function(string, UpdateAliasResponse):void} cb
     * @public
     */
    UpdateAlias(req, cb) {
        let resp = new UpdateAliasResponse();
        this.request("UpdateAlias", req, resp, cb);
    }

    /**
     * This API is used to import key material into an EXTERNAL CMK. The key obtained through the `GetParametersForImport` API is used to encrypt the key material. You can only reimport the same key material into the specified CMK and set a new expiration time. After the CMK key material is imported, it cannot be replaced. After the key material is expired or deleted, the CMK will remain unavailable until the same key material is reimported. CMKs are independent, which means that the same key material can be imported into different CMKs, but data encrypted by one CMK cannot be decrypted by another one.
Key material can only be imported into CMKs in `Enabled` and `PendingImport` status.
     * @param {ImportKeyMaterialRequest} req
     * @param {function(string, ImportKeyMaterialResponse):void} cb
     * @public
     */
    ImportKeyMaterial(req, cb) {
        let resp = new ImportKeyMaterialResponse();
        this.request("ImportKeyMaterial", req, resp, cb);
    }

    /**
     * This API is used to get the information of the public key that is encrypted with the asymmetric cryptographic algorithm and of which the `KeyUsage` is `ASYMMETRIC_DECRYPT_RSA_2048` or `ASYMMETRIC_DECRYPT_SM2`. This public key can be used to encrypt data locally, and the data encrypted with it can only be decrypted with the corresponding private key through KMS. The public key can only be obtained from the asymmetric key in `Enabled` state.
     * @param {GetPublicKeyRequest} req
     * @param {function(string, GetPublicKeyResponse):void} cb
     * @public
     */
    GetPublicKey(req, cb) {
        let resp = new GetPublicKeyResponse();
        this.request("GetPublicKey", req, resp, cb);
    }

    /**
     * This API is used to disable a master key. The disabled key cannot be used for encryption and decryption operations.
     * @param {DisableKeyRequest} req
     * @param {function(string, DisableKeyResponse):void} cb
     * @public
     */
    DisableKey(req, cb) {
        let resp = new DisableKeyResponse();
        this.request("DisableKey", req, resp, cb);
    }

    /**
     * This API generates a data key, which you can use to encrypt local data.
     * @param {GenerateDataKeyRequest} req
     * @param {function(string, GenerateDataKeyResponse):void} cb
     * @public
     */
    GenerateDataKey(req, cb) {
        let resp = new GenerateDataKeyResponse();
        this.request("GenerateDataKey", req, resp, cb);
    }

    /**
     * This API is used to decrypt data with the specified private key that is encrypted with SM2 asymmetric cryptographic algorithm. The ciphertext must be encrypted with the corresponding public key. The asymmetric key must be in `Enabled` state for decryption. The length of the ciphertext passed in cannot exceed 256 bytes.
     * @param {AsymmetricSm2DecryptRequest} req
     * @param {function(string, AsymmetricSm2DecryptResponse):void} cb
     * @public
     */
    AsymmetricSm2Decrypt(req, cb) {
        let resp = new AsymmetricSm2DecryptResponse();
        this.request("AsymmetricSm2Decrypt", req, resp, cb);
    }

    /**
     * Cancel the scheduled deletion of CMK
     * @param {CancelKeyDeletionRequest} req
     * @param {function(string, CancelKeyDeletionResponse):void} cb
     * @public
     */
    CancelKeyDeletion(req, cb) {
        let resp = new CancelKeyDeletionResponse();
        this.request("CancelKeyDeletion", req, resp, cb);
    }

    /**
     * Query whether the specified CMK has the key rotation function.
     * @param {GetKeyRotationStatusRequest} req
     * @param {function(string, GetKeyRotationStatusResponse):void} cb
     * @public
     */
    GetKeyRotationStatus(req, cb) {
        let resp = new GetKeyRotationStatusResponse();
        this.request("GetKeyRotationStatus", req, resp, cb);
    }

    /**
     * Used to query whether the user has activated the KMS service.
     * @param {GetServiceStatusRequest} req
     * @param {function(string, GetServiceStatusResponse):void} cb
     * @public
     */
    GetServiceStatus(req, cb) {
        let resp = new GetServiceStatusResponse();
        this.request("GetServiceStatus", req, resp, cb);
    }

    /**
     * This API is used to list the encryption methods supported in the current region.
     * @param {ListAlgorithmsRequest} req
     * @param {function(string, ListAlgorithmsResponse):void} cb
     * @public
     */
    ListAlgorithms(req, cb) {
        let resp = new ListAlgorithmsResponse();
        this.request("ListAlgorithms", req, resp, cb);
    }

    /**
     * This API is used to get the attribute details of the CMK with a specified `KeyId`.
     * @param {DescribeKeyRequest} req
     * @param {function(string, DescribeKeyResponse):void} cb
     * @public
     */
    DescribeKey(req, cb) {
        let resp = new DescribeKeyResponse();
        this.request("DescribeKey", req, resp, cb);
    }

    /**
     * This API is used to list the KeyIds of CMKs in `Enabled`, `Disabled`, and `PendingImport` status under the account.
     * @param {ListKeysRequest} req
     * @param {function(string, ListKeysResponse):void} cb
     * @public
     */
    ListKeys(req, cb) {
        let resp = new ListKeysResponse();
        this.request("ListKeys", req, resp, cb);
    }

    /**
     * This API is used to generate a random number.
     * @param {GenerateRandomRequest} req
     * @param {function(string, GenerateRandomResponse):void} cb
     * @public
     */
    GenerateRandom(req, cb) {
        let resp = new GenerateRandomResponse();
        this.request("GenerateRandom", req, resp, cb);
    }

    /**
     * Create a master key CMK (Custom Master Key) for user management data keys
     * @param {CreateKeyRequest} req
     * @param {function(string, CreateKeyResponse):void} cb
     * @public
     */
    CreateKey(req, cb) {
        let resp = new CreateKeyResponse();
        this.request("CreateKey", req, resp, cb);
    }

    /**
     * Re-encrypt the ciphertext using the specified CMK.
     * @param {ReEncryptRequest} req
     * @param {function(string, ReEncryptResponse):void} cb
     * @public
     */
    ReEncrypt(req, cb) {
        let resp = new ReEncryptResponse();
        this.request("ReEncrypt", req, resp, cb);
    }

    /**
     * This API is used to obtain the parameters of the material to be imported into a CMK. The returned `Token` is used as one of the parameters to execute `ImportKeyMaterial`, and the returned `PublicKey` is used to encrypt the key material. The `Token` and `PublicKey` are valid for 24 hours. If they are expired, you will need to call the API again to get a new `Token` and `PublicKey`.
     * @param {GetParametersForImportRequest} req
     * @param {function(string, GetParametersForImportResponse):void} cb
     * @public
     */
    GetParametersForImport(req, cb) {
        let resp = new GetParametersForImportResponse();
        this.request("GetParametersForImport", req, resp, cb);
    }

    /**
     * Get the master key list details according to the specified Offset and Limit.
     * @param {ListKeyDetailRequest} req
     * @param {function(string, ListKeyDetailResponse):void} cb
     * @public
     */
    ListKeyDetail(req, cb) {
        let resp = new ListKeyDetailResponse();
        this.request("ListKeyDetail", req, resp, cb);
    }

    /**
     * Disabled key rotation for the specified CMK.
     * @param {DisableKeyRotationRequest} req
     * @param {function(string, DisableKeyRotationResponse):void} cb
     * @public
     */
    DisableKeyRotation(req, cb) {
        let resp = new DisableKeyRotationResponse();
        this.request("DisableKeyRotation", req, resp, cb);
    }

    /**
     * This API is used to enable CMK in batches.
     * @param {EnableKeysRequest} req
     * @param {function(string, EnableKeysResponse):void} cb
     * @public
     */
    EnableKeys(req, cb) {
        let resp = new EnableKeysResponse();
        this.request("EnableKeys", req, resp, cb);
    }

    /**
     * CMK planned deletion API, used to specify the time of CMK deletion, the optional time interval is [7,30] days
     * @param {ScheduleKeyDeletionRequest} req
     * @param {function(string, ScheduleKeyDeletionResponse):void} cb
     * @public
     */
    ScheduleKeyDeletion(req, cb) {
        let resp = new ScheduleKeyDeletionResponse();
        this.request("ScheduleKeyDeletion", req, resp, cb);
    }

    /**
     * This API is used to decrypt data with the specified private key that is encrypted with RSA asymmetric cryptographic algorithm. The ciphertext must be encrypted with the corresponding public key. The asymmetric key must be in `Enabled` state for decryption.
     * @param {AsymmetricRsaDecryptRequest} req
     * @param {function(string, AsymmetricRsaDecryptResponse):void} cb
     * @public
     */
    AsymmetricRsaDecrypt(req, cb) {
        let resp = new AsymmetricRsaDecryptResponse();
        this.request("AsymmetricRsaDecrypt", req, resp, cb);
    }

    /**
     * Turn on the key rotation function for the specified CMK.
     * @param {EnableKeyRotationRequest} req
     * @param {function(string, EnableKeyRotationResponse):void} cb
     * @public
     */
    EnableKeyRotation(req, cb) {
        let resp = new EnableKeyRotationResponse();
        this.request("EnableKeyRotation", req, resp, cb);
    }

    /**
     * Enable a specified CMK.
     * @param {EnableKeyRequest} req
     * @param {function(string, EnableKeyResponse):void} cb
     * @public
     */
    EnableKey(req, cb) {
        let resp = new EnableKeyResponse();
        this.request("EnableKey", req, resp, cb);
    }

    /**
     * This API is used to decrypt the ciphertext and obtain the plaintext data.
     * @param {DecryptRequest} req
     * @param {function(string, DecryptResponse):void} cb
     * @public
     */
    Decrypt(req, cb) {
        let resp = new DecryptResponse();
        this.request("Decrypt", req, resp, cb);
    }

    /**
     * This API is used to get the attribute information of CMKs in batches.
     * @param {DescribeKeysRequest} req
     * @param {function(string, DescribeKeysResponse):void} cb
     * @public
     */
    DescribeKeys(req, cb) {
        let resp = new DescribeKeysResponse();
        this.request("DescribeKeys", req, resp, cb);
    }

    /**
     * This API is used to modify the description of the specified CMK. CMKs in `PendingDelete` status cannot be modified.
     * @param {UpdateKeyDescriptionRequest} req
     * @param {function(string, UpdateKeyDescriptionResponse):void} cb
     * @public
     */
    UpdateKeyDescription(req, cb) {
        let resp = new UpdateKeyDescriptionResponse();
        this.request("UpdateKeyDescription", req, resp, cb);
    }

    /**
     * This API is used to batch prohibit the use of CMK.
     * @param {DisableKeysRequest} req
     * @param {function(string, DisableKeysResponse):void} cb
     * @public
     */
    DisableKeys(req, cb) {
        let resp = new DisableKeysResponse();
        this.request("DisableKeys", req, resp, cb);
    }


}
module.exports = KmsClient;
